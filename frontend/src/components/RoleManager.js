import React, { useState, useEffect } from "react";

const ROLE_LABELS = [
  "None",
  "Nh√† s·∫£n xu·∫•t",
  "ƒê·∫°i l√Ω/C·ª≠a h√†ng",
  "Kh√°ch h√†ng",
  "Trung t√¢m b·∫£o h√†nh"
];

export default function RoleManager({ contract, account }) {
  const [myRole, setMyRole] = useState(0);
  const [isOwner, setIsOwner] = useState(false);
  const [target, setTarget] = useState("");
  const [role, setRole] = useState(1);
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState("");
  const [roleList, setRoleList] = useState([]);
  const [contractOwner, setContractOwner] = useState("");

  useEffect(() => {
    const fetchRole = async () => {
      if (!contract || !account) return;
      try {
        const owner = await contract.methods.owner().call();
        setContractOwner(owner);
        setIsOwner(owner.toLowerCase() === account.toLowerCase());
        const r = await contract.methods.roles(account).call();
        setMyRole(Number(r));
        console.log("Role check:", { owner, account, isOwner: owner.toLowerCase() === account.toLowerCase(), role: Number(r) });
      } catch (err) {
        console.error("Error fetching role:", err);
      }
    };
    fetchRole();
  }, [contract, account]);

  useEffect(() => {
    const fetchRoles = async () => {
      if (!contract || !account) return;
      // Ch·ªâ owner m·ªõi xem ƒë∆∞·ª£c to√†n b·ªô danh s√°ch role
      const owner = await contract.methods.owner().call();
      if (owner.toLowerCase() !== account.toLowerCase()) return;
      // Gi·∫£ s·ª≠ contract c√≥ s·ª± ki·ªán RoleGranted, ta s·∫Ω qu√©t event ƒë·ªÉ l·∫•y danh s√°ch address ƒë√£ ƒë∆∞·ª£c g√°n role
      try {
        const events = await contract.getPastEvents('RoleGranted', { fromBlock: 0, toBlock: 'latest' });
        // L·∫•y unique address
        const addresses = [...new Set(events.map(e => e.returnValues.user))];
        const roles = await Promise.all(addresses.map(async addr => {
          const r = await contract.methods.roles(addr).call();
          return { address: addr, role: Number(r) };
        }));
        setRoleList(roles);
      } catch (e) {
        setRoleList([]);
      }
    };
    fetchRoles();
  }, [contract, account]);

  const handleGrant = async (e) => {
    e.preventDefault();
    setMsg("");
    setLoading(true);
    
    if (!target || target.trim() === "") {
      setMsg("L·ªói: Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!");
      setLoading(false);
      return;
    }
    
    if (!target.match(/^0x[a-fA-F0-9]{40}$/)) {
      setMsg("L·ªói: ƒê·ªãa ch·ªâ kh√¥ng h·ª£p l·ªá!");
      setLoading(false);
      return;
    }
    
    try {
      console.log("Granting role:", { target, role, account });
      
      const result = await contract.methods.grantRole(target, role).send({ 
        from: account,
        gas: 2000000
      });
      
      console.log("Transaction result:", result);
      setMsg("‚úÖ Ph√¢n quy·ªÅn th√†nh c√¥ng! Transaction: " + result.transactionHash);
      
      // Refresh role list
      setTimeout(() => {
        window.location.reload();
      }, 2000);
      
    } catch (err) {
      console.error("Grant role error:", err);
      let errorMsg = "L·ªói: ";
      
      if (err.message.includes("Only contract owner")) {
        errorMsg += "Ch·ªâ owner m·ªõi c√≥ quy·ªÅn ph√¢n quy·ªÅn!";
      } else if (err.message.includes("Invalid role")) {
        errorMsg += "Role kh√¥ng h·ª£p l·ªá!";
      } else if (err.message.includes("User denied")) {
        errorMsg += "Ng∆∞·ªùi d√πng t·ª´ ch·ªëi giao d·ªãch!";
      } else if (err.message.includes("insufficient funds")) {
        errorMsg += "Kh√¥ng ƒë·ªß ETH ƒë·ªÉ tr·∫£ gas!";
      } else {
        errorMsg += err.message;
      }
      
      setMsg(errorMsg);
    }
    setLoading(false);
  };

  // Demo: Danh s√°ch role m·∫´u (c√≥ th·ªÉ l·∫•y t·ª´ props ho·∫∑c hardcode cho demo)
  const DEMO_ROLES = [
    { label: 'Manufacturer', desc: 'T·∫°o s·∫£n ph·∫©m, chuy·ªÉn cho Dealer', color: '#4f8cff', demo: 'V√≠ admin, t·∫°o s·∫£n ph·∫©m' },
    { label: 'Dealer', desc: 'Nh·∫≠n s·∫£n ph·∫©m t·ª´ Manufacturer, chuy·ªÉn cho Customer', color: '#ffb84f', demo: 'V√≠ ƒë·∫°i l√Ω/c·ª≠a h√†ng, nh·∫≠n/chuy·ªÉn s·∫£n ph·∫©m' },
    { label: 'Customer', desc: 'Nh·∫≠n s·∫£n ph·∫©m t·ª´ Dealer, x√°c th·ª±c, b·∫£o h√†nh', color: '#4fcf7f', demo: 'V√≠ kh√°ch h√†ng, x√°c th·ª±c s·∫£n ph·∫©m' },
    { label: 'Warranty Center', desc: 'Nh·∫≠n s·∫£n ph·∫©m t·ª´ Customer ƒë·ªÉ b·∫£o h√†nh/s·ª≠a ch·ªØa', color: '#cf4fff', demo: 'V√≠ trung t√¢m b·∫£o h√†nh, ghi nh·∫≠n b·∫£o h√†nh/s·ª≠a ch·ªØa' }
  ];

  return (
    <>
      <div className="card" style={{marginBottom:16, padding:16}}>
        <h3>DEMO: Danh s√°ch vai tr√≤ & h∆∞·ªõng d·∫´n</h3>
        <table style={{width:'100%', marginTop:8, fontSize:14, background:'#fff', borderRadius:4}}>
          <thead><tr style={{background:'#e3e8ff'}}><th>Role</th><th>Ch·ª©c nƒÉng</th><th>Ghi ch√∫ demo</th></tr></thead>
          <tbody>
            {DEMO_ROLES.map((r, idx) => (
              <tr key={r.label}>
                <td style={{color:r.color, fontWeight:600}}>{r.label}</td>
                <td>{r.desc}</td>
                <td>{r.demo}</td>
              </tr>
            ))}
          </tbody>
        </table>
        <div style={{marginTop:8, color:'#888', fontSize:13}}>
          <b>L∆∞u √Ω:</b> ƒê·ªÉ demo, admin h√£y ph√¢n quy·ªÅn c√°c v√≠ Metamask kh√°c nhau cho t·ª´ng vai tr√≤, sau ƒë√≥ ƒëƒÉng nh·∫≠p b·∫±ng t·ª´ng v√≠ ƒë·ªÉ th·ª±c hi·ªán c√°c ch·ª©c nƒÉng t∆∞∆°ng ·ª©ng.<br/>
          N·∫øu ch∆∞a c√≥ v√≠ m·∫´u, h√£y t·∫°o nhi·ªÅu account tr√™n Metamask v√† ph√¢n quy·ªÅn t·∫°i ƒë√¢y.
        </div>
      </div>
      <div className="card" style={{marginBottom:16, padding:16}}>
        <h3>Danh s√°ch c√°c address ƒë√£ ƒë∆∞·ª£c g√°n role</h3>
        <div style={{color:'#888', fontSize:13, marginBottom:6}}>
          Danh s√°ch n√†y gi√∫p b·∫°n bi·∫øt v√≠ n√†o ƒëang gi·ªØ vai tr√≤ g√¨ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch demo gi·ªØa c√°c role. (T·ª± ƒë·ªông c·∫≠p nh·∫≠t khi ph√¢n quy·ªÅn m·ªõi)
        </div>
        <table style={{width:'100%', marginTop:6, fontSize:14, background:'#fff', borderRadius:4}}>
          <thead><tr style={{background:'#e3e8ff'}}><th>Address</th><th>Role</th></tr></thead>
          <tbody>
            {roleList.length === 0 && <tr><td colSpan={2} style={{color:'#888'}}>Ch∆∞a c√≥ address n√†o ƒë∆∞·ª£c g√°n role.</td></tr>}
            {roleList.map((r, idx) => (
              <tr key={r.address}>
                <td style={{fontFamily:'monospace'}}>{r.address}</td>
                <td>{ROLE_LABELS[r.role]}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="card" style={{marginBottom:16, padding:16}}>
        <h3>Qu·∫£n l√Ω vai tr√≤</h3>
        <div><b>ƒê·ªãa ch·ªâ c·ªßa b·∫°n:</b> {account}</div>
        <div><b>Vai tr√≤ hi·ªán t·∫°i:</b> <span style={{color:'#2563eb', fontWeight:600}}>{ROLE_LABELS[myRole]}</span></div>
        <div><b>Contract Owner:</b> <span style={{fontFamily:'monospace'}}>{contractOwner}</span></div>
        {isOwner ? (
          <>
            <div style={{background:'#d1fae5', color:'#065f46', padding:'8px 12px', borderRadius:'6px', marginBottom:'12px', fontSize:'14px'}}>
              ‚úÖ <strong>B·∫°n l√† Owner!</strong> B·∫°n c√≥ quy·ªÅn ph√¢n quy·ªÅn cho c√°c t√†i kho·∫£n kh√°c.
            </div>
            <form onSubmit={handleGrant} style={{marginTop:12, display:'flex', flexWrap:'wrap', gap:8, alignItems:'center'}}>
              <input 
                placeholder="ƒê·ªãa ch·ªâ t√†i kho·∫£n (0x...)" 
                value={target} 
                onChange={e => setTarget(e.target.value)} 
                type="text" 
                style={{minWidth:'300px'}}
              />
              <select value={role} onChange={e => setRole(Number(e.target.value))}>
                <option value={1}>Nh√† s·∫£n xu·∫•t</option>
                <option value={2}>ƒê·∫°i l√Ω/C·ª≠a h√†ng</option>
                <option value={3}>Kh√°ch h√†ng</option>
                <option value={4}>Trung t√¢m b·∫£o h√†nh</option>
              </select>
              <button 
                type="submit" 
                disabled={loading || !target.trim()}
                style={{
                  background: loading || !target.trim() ? '#ccc' : '#2563eb',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  padding: '8px 16px',
                  cursor: loading || !target.trim() ? 'not-allowed' : 'pointer'
                }}
              >
                {loading ? "‚è≥ ƒêang ph√¢n quy·ªÅn..." : "üöÄ Ph√¢n quy·ªÅn"}
              </button>
            </form>
          </>
        ) : (
          <div style={{background:'#fef3c7', color:'#92400e', padding:'8px 12px', borderRadius:'6px', marginTop:'12px', fontSize:'14px'}}>
            ‚ö†Ô∏è <strong>B·∫°n kh√¥ng ph·∫£i Owner!</strong> Ch·ªâ owner m·ªõi c√≥ quy·ªÅn ph√¢n quy·ªÅn. 
            <br/>Owner hi·ªán t·∫°i: <span style={{fontFamily:'monospace'}}>{contractOwner}</span>
          </div>
        )}
        {msg && <div style={{marginTop:8, padding:'8px 12px', borderRadius:'6px', background: msg.includes('‚úÖ') ? '#d1fae5' : '#fef2f2', color: msg.includes('‚úÖ') ? '#065f46' : '#dc2626'}}>{msg}</div>}
      </div>
    </>
  );
} 